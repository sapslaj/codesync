# Put a file similar to this in your home directory as ~/.codesync.yaml to
# configure codesync's options.

# Config file version, so codesync knows how to parse the config correctly
version: 0.1

# Directory where the codesync hierarchy lives. Defaults to ~/src but option
# is where you can change that.
src_dir: ~/code

# Bulk of config is in here
providers:
  # In general "_" denotes default and more specific configs inherit the
  # default.
  _:
    repos:
      _:
        # Set the default or main branch for the repo. Defaults to "main", but
        # some repos use "master", "develop", etc.
        default_branch: main
  github.com:
    auth:
      # You can set the GitHub token here or use the GITHUB_TOKEN envvar.
      token: ghp_0123456789abcdefhijklmnopqrstuvwxyzA
    orgs:
      _:
        # by default, codesync won't process orgs unless you explicitly set per
        # org or change the default as seen here.
        enabled: true
        repos:
          _:
            actions:
              # change default to delete archived or orphaned repos (default
              # does no action)
              archived: [delete]
              orphaned: [delete]
      hashicorp:
        # Hashicorp has a lot of repos, so to speed things up we can disable
        # processing at an org level and just manually sync things.
        enabled: false
      psf:
        # We only want Python Software Foundation's repos which are _actually_
        # Python projects, but we only want to clone them once for f"{reasons}"
        enabled: true
        topics:
          python:
            actions:
              active: [clone]
      sapslaj:
        enabled: true
        # All of the possible default branches for this org in case the default
        # branch is inconsistent between repos.
        default_branches: ["main", "master"]
        repos:
          _:
            actions:
              # clone any new repos created in addition to pulling existing
              # ones
              active: [pull, clone]
              # if theres a repo with no corresponding upstream, that might be
              # a problem! raising the issue will quite literally raise an
              # exception if a repo in this state is encountered.
              orphaned: [raise]
          broken-repo:
            # If you specifically don't want to process a particular repo for
            # whatever reason, you can disable it
            enabled: false
